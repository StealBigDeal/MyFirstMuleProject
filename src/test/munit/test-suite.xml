<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:munit="http://www.mulesoft.org/schema/mule/munit" xmlns:munit-tools="http://www.mulesoft.org/schema/mule/munit-tools"
	xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xsi:schemaLocation="
		http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
		http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd
		http://www.mulesoft.org/schema/mule/munit-tools  http://www.mulesoft.org/schema/mule/munit-tools/current/mule-munit-tools.xsd">
	<munit:config name="test-suite.xml" />
	<munit:test name="testFlow-test-success" doc:id="4104a940-8cb5-4be0-bf05-5aee4588d35f" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock Select" doc:id="c6d390b1-d190-4d88-b3cb-46e21e7a3d50" processor="db:select">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="e46aab8c-c368-486d-ae28-74307fd34458" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/java --- readUrl('classpath://testFlowtestsuccess\mock_payload.dwl')]" mediaType="application/java" encoding="UTF-8" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:spy doc:name="Spy Transform Message" doc:id="c0dd607d-4f2e-4e2d-b767-cdf1c72a379c" processor="ee:transform">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="f8aa2fa9-a4f3-4fe1-841c-e5a0861322a3" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:before-call >
					<munit-tools:assert doc:name="Assert payload" doc:id="97317338-31b7-421d-afa4-87b04d0f734a" message="The payload does not match">
						<munit-tools:that ><![CDATA[#[%dw 2.0
import testFlowtestsuccess::spy_assert_payload
---
spy_assert_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
					</munit-tools:assert>
				</munit-tools:before-call>
				<munit-tools:after-call >
					<munit-tools:assert doc:name="Assert payload" doc:id="389204ab-2bf6-48bb-a062-fe164955956c" message="The payload does not match">
						<munit-tools:that ><![CDATA[#[%dw 2.0
import testFlowtestsuccess::spy_assert_payload1
---
spy_assert_payload1::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
					</munit-tools:assert>
				</munit-tools:after-call>
			</munit-tools:spy>
			<munit:set-event doc:name="Set Input" doc:id="34b841d6-06b7-45d0-9910-ddf025d892f6" >
				<munit:payload value="#[readUrl('classpath://testFlowtestsuccess\set-event_payload.dwl')]" encoding="UTF-8" />
				<munit:attributes value="#[readUrl('classpath://testFlowtestsuccess\set-event_attributes.dwl')]" />
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to testFlow" doc:id="639b9280-f31b-4a16-a64e-5ec393896770" name="testFlow"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="6f9666db-a2c5-4f66-a063-7bcb1d940dbf" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import testFlowtestsuccess::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
			<munit-tools:verify-call doc:name="Verify Transform Message" doc:id="d8064a06-e829-47c5-bd7d-e3ac8d1dbb38" processor="ee:transform" times="1">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="f8aa2fa9-a4f3-4fe1-841c-e5a0861322a3" attributeName="doc:id" />
				</munit-tools:with-attributes>
			</munit-tools:verify-call>
		</munit:validation>
	</munit:test>


</mule>
